{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","d","Date","api","useState","query","setQuery","lol","setLol","console","log","class","onChange","e","target","value","type","placeholder","onClick","evt","fetch","then","res","json","result","main","name","getDate","getMonth","getFullYear","Math","round","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gQAwDeA,MArDf,WACE,IAAIC,EAAG,IAAIC,KACLC,EAEA,mCAJO,EAMUC,mBAAS,IANnB,mBAMNC,EANM,KAMAC,EANA,OAOMF,mBAAS,IAPf,mBAONG,EAPM,KAOFC,EAPE,KAmBb,OAFAC,QAAQC,IAAIL,GACZI,QAAQC,IAAIH,GAEV,yBAAKI,MAAM,OACT,8BACE,yBAAKA,MAAM,OACT,2BAAOC,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOC,QAAQA,MAAOV,EAAOW,KAAK,aAAaC,YAAY,cAC5F,4BAAQC,QAhBH,SAAAC,GACXC,MAAM,qDAAD,OAAsDf,EAAtD,0BAA6EF,IAChFkB,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACHlB,EAAS,IACTE,EAAOgB,GACPf,QAAQC,IAAIc,QAUe,uBAAGb,MAAM,oBAEf,oBAAZJ,EAAIkB,KACX,yBAAKd,MAAM,SACT,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAaJ,EAAImB,OAE7B,yBAAKf,MAAM,QACT,wBAAIA,MAAM,YAAYV,EAAE0B,WACxB,wBAAIhB,MAAM,YAAV,KACA,wBAAIA,MAAM,YAAYV,EAAE2B,YACxB,wBAAIjB,MAAM,YAAV,KACA,wBAAIA,MAAM,YAAYV,EAAE4B,gBAE1B,yBAAKlB,MAAM,eACT,uBAAGA,MAAM,aAAamB,KAAKC,MAAMxB,EAAIkB,KAAKO,KAAK,KAA/C,WAIJ,6BACE,wBAAIrB,MAAM,QAAV,8BCnCQsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.e1ba40d8.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  var d= new Date()\n  const api={\n    base:'https://api.openweather.org/data/2.5/',\n    key:'4bfdfec227f66e475506aa655824fc43',\n  }\n  const [query,setQuery]=useState('');\n  const [lol,setLol]=useState({});\n  const search=evt=>{\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&unit=uk&appid=${api.key}`)\n     .then(res=> res.json())\n     .then(result => {\n        setQuery('')\n        setLol(result)\n        console.log(result)\n      });\n  };\n  console.log(query);\n  console.log(lol);\n  return (\n    <div class='app'>\n      <main>\n        <div class='len'>\n          <input onChange={e => setQuery(e.target.value)} value={query} type='search-box' placeholder='search...'/>\n          <button onClick={search}><i class=\"fas fa-search\"></i></button>\n        </div>\n        {(typeof lol.main != 'undefined') ? (\n          <div class='fully'>\n            <div class='yet'>\n              <h1 class='name-text'>{lol.name}</h1>\n            </div>\n            <div class='well'>\n              <h1 class='new-text'>{d.getDate()}</h1>\n              <h1 class='new-text'>/</h1>\n              <h1 class='new-text'>{d.getMonth()}</h1>\n              <h1 class='new-text'>/</h1>\n              <h1 class='new-text'>{d.getFullYear()}</h1>\n            </div>\n            <div class='container-2'>\n              <p class='cell-text'>{Math.round(lol.main.temp-273) }Â°C</p>\n            </div>\n          </div>\n        ):(\n          <div>\n            <h1 class='temp'>SEARCH CITY TEMPRATURE</h1>\n          </div>\n        )}\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}